-- TODO
-- * сортировать все функции по именам
-- * разбить большие функции на мелкие

local hyper_msgs = require("hyper_trails.msgs")
local hyper_fmath = require("hyper_trails.fmath")
local hyper_geometry = require("hyper_trails.geometry")

-- Note: when changing property here, don't forget to do so in apply_to_properties()
go.property("follow_target", msg.url())
go.property("world_position_of_target", false)
go.property("wind_direction", vmath.vector3(0.0, 0.0, 0.0))
go.property("trail_width", 20)
go.property("trail_tint_color", vmath.vector4(1.0, 1.0, 1.0, 1.0))
go.property("segment_length_max", 0)
go.property("segment_length_min", 0)
go.property("points_count", 16)
go.property("points_limit", 0)
go.property("fade_tail_alpha", false)
go.property("shrink_tail_width", false)
go.property("texture_tiling", true)
go.property("trail_model_url", msg.url("#trail_model"))

local _props_names = {
	"world_position_of_target",
	"wind_direction",
	"trail_width",
	"trail_tint_color",
	"segment_length_max",
	"segment_length_min",
	-- "points_limit",
	"fade_tail_alpha",
	"shrink_tail_width",
	"texture_tiling"
}

local function apply_to_properties(self, m)
	for _, v in pairs(_props_names) do
		if m[v] ~= nil then
			self[v] = m[v]
		end
	end
end

local function create_texture(self)
	self._tex_buffer = buffer.create(self._tex_w * self._tex_h, { 
		{
			name = hash("rgba"), 
			type = buffer.VALUE_TYPE_UINT8, 
			count = 4
		}
	})
	self._tex_stream = buffer.get_stream(self._tex_buffer, hash("rgba"))
end

local function write_vectors(self, p_x, min_x, min_y, v1, v2)
	local s = self._tex_stream

	local i = (p_x - 1) * 4 + 1
	local u = hyper_fmath.encode_rgba_float(v1.x - min_x)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v1.y - min_y)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v2.x - min_x)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v2.y - min_y)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]
end

local function write_tint(self, p_x, tint)
	local s = self._tex_stream
	local p_y = 5

	local i = (p_y - 1) * self._tex_w * 4 + (p_x - 1) * 4 + 1
	s[i + 0] = tint.x * 255
	s[i + 1] = tint.y * 255
	s[i + 2] = tint.z * 255
	s[i + 3] = tint.w * 255
end

local function apply_vector_pairs_to_segment(self, row)
	local a = row.angle - math.pi / 2
	local w = row.width / 2

	row.v1 = vmath.vector3(math.cos(a) * w, math.sin(a) * w, 0) + row.pos
	row.v2 = vmath.vector3(math.cos(a + math.pi) * w, math.sin(a + math.pi) * w, 0) + row.pos

	if not row.new and row.prev ~= nil and row.prev.v1 ~= nil then
		local prev = row.prev

		local intersects = hyper_geometry.lines_intersects(row.v1, prev.v1, row.v2, prev.v2, false)
		if intersects then
			local v = row.v2
			row.v2 = row.v1
			row.v1 = v
		end
	end
end

local function make_angle(last, to)
	local new_angle = math.atan2(to.y - last.pos.y, to.x - last.pos.x)
	local angle = last.angle

	return new_angle
end

local function init_data(self)
	self._data = {}

	for i = 1, self._data_w do
		local tint = vmath.vector4(self.trail_tint_color)
		tint.w = 0

		self._data[i] = {
			pos = vmath.vector3(),
			angle = 0,
			tint = tint,
			width = self.trail_width,
			prev = self._data[i - 1],
			dirty = false,
			new = true
		}
		apply_vector_pairs_to_segment(self, self._data[i])
	end
end

local function init_props(self)
	if self.points_limit > self.points_count or self.points_limit == 0 then
		self.points_limit = self.points_count
	end

	if self.follow_target == msg.url() then
		self.follow_target = nil
	end
end

local function update_texture(self)
	resource.set_texture(self._resource_path, self._tex_header, self._tex_buffer)
end

local function update_uv_opts(self)
	if self.texture_tiling then
		model.set_constant(self.trail_model_url, "uv_opts", vmath.vector4(1, 0, 1, 0))
	else
		model.set_constant(self.trail_model_url, "uv_opts", vmath.vector4(0, 1, self.points_count, 0))
	end
end

local function encode_data_to_texture(self)
	local min_x = nil
	local min_y = nil
	for i = 1, self._data_w do
		local d = self._data[i]
		if i == 1 then
			min_x = d.v1.x
			min_y = d.v1.y
		end

		min_x = math.min(min_x, d.v1.x, d.v2.x)
		min_y = math.min(min_y, d.v1.y, d.v2.y)
	end
	model.set_constant(self.trail_model_url, "pos_offset", vmath.vector4(min_x, min_y, 0, 0))
	
	for i = 1, self._data_w do
		local d = self._data[i]
		write_vectors(self, i, min_x, min_y, d.v1, d.v2)
		write_tint(self, i, d.tint)
	end
end

local function update_dirty_data(self)
	for i = 1, self._data_w do
		if self._data[i].dirty then
			apply_vector_pairs_to_segment(self, self._data[i])
			self._data[i].dirty = false
		end
	end
end

local function draw_trail(self)
	update_dirty_data(self)
	encode_data_to_texture(self)
	update_uv_opts(self)
	update_texture(self)
end

local function last_data_points(self)
	return self._data[self._data_w - 1], self._data[self._data_w]
end

local function follow_position(self, new_position)
	local prev_point, last_point = last_data_points(self)
	local lp_dist = hyper_geometry.distance(prev_point.pos, last_point.pos)

	local new_point = nil
	local add_new_p = true
	if self.segment_length_min > 0 then 
		if lp_dist < self.segment_length_min then
			add_new_p = false
			new_point = last_point
			last_point = prev_point
		end
	end

	if add_new_p then
		new_point = self._data[1]
		for i = 1, self._data_w - 1 do
			self._data[i] = self._data[i + 1]
		end
	end

	new_point.pos = new_position
	new_point.angle = make_angle(last_point, new_position)
	new_point.tint = vmath.vector4(self.trail_tint_color)
	new_point.width = self.trail_width
	new_point.prev = last_point
	new_point.dirty = true

	self._data[self._data_w] = new_point

	if self.fade_tail_alpha then
		for i = 1, self._data_w do
			local w = (i - 1) / (self._data_w - 1)
			if self._data[i].tint.w > w then
				self._data[i].tint.w = w
				self._data[i].dirty = true
			end
		end
	end

	if self.shrink_tail_width then
		for i = 1, self._data_w do
			self._data[i].width = self.trail_width * (i / self._data_w)
			self._data[i].dirty = true
		end
	end
end

local function reset_position(self, position)
	for i = 1, self._data_w do
		self._data[i].pos = vmath.vector3(position)
		self._data[i].dirty = true
	end
end

local function follow_target(self)
	local target_pos = nil
	if self.world_position_of_target then
		target_pos = go.get_world_position(self.follow_target)
	else
		target_pos = go.get_position(self.follow_target)
	end

	follow_position(self, target_pos)
end

function init(self)
	self._tex_h = 8
	self._tex_w = self.points_count
	self._data_w = self.points_count
	self._resource_path = go.get(self.trail_model_url, "texture0")
	self._tex_header = { 
		width = self._tex_w,
		height = self._tex_h,
		type = resource.TEXTURE_TYPE_2D,
		format = resource.TEXTURE_FORMAT_RGBA,
		num_mip_maps = 1
	}

	model.set_constant(self.trail_model_url, "tex_size", vmath.vector4(self._tex_w, self._tex_h, 0, 0))

	init_props(self)
	create_texture(self)
	init_data(self)
	update_uv_opts(self)
	update_texture(self)

	if self.follow_target ~= nil then
		local target_pos = nil
		if self.world_position_of_target then
			target_pos = go.get_world_position(self.follow_target)
		else
			target_pos = go.get_position(self.follow_target)
		end

		msg.post(".", hyper_msgs.RESET_POSITION, { position = target_pos, draw = true })
	end
end

function final(self)
end

function update(self, dt)
	if self.follow_target ~= nil then
		follow_target(self)
		draw_trail(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hyper_msgs.FOLLOW_TARGET then
		assert(message.target ~= nil)
		self.follow_target = message.target

		apply_to_properties(self, message)

		follow_target(self)
		if message.draw then
			draw_trail(self)
		end
	elseif message_id == hyper_msgs.FOLLOW_POSITION then
		self.follow_target = nil
		assert(message.position ~= nil)

		apply_to_properties(self, message)

		follow_position(self, message.position)
		if message.draw then
			draw_trail(self)
		end
	elseif message_id == hyper_msgs.RESET_POSITION then
		assert(message.position ~= nil)

		apply_to_properties(self, message)

		reset_position(self, message.position)
		if message.draw then
			draw_trail(self)
		end
	elseif message_id == hyper_msgs.DRAW_TRAIL then
		apply_to_properties(self, message)

		draw_trail(self)
	end
end
