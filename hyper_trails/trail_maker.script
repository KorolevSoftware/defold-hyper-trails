-- TODO
-- * сортировать все функции по именам
-- * разбить большие функции на мелкие

local hyper_msgs = require("hyper_trails.msgs")
local hyper_fmath = require("hyper_trails.fmath")
local hyper_geometry = require("hyper_trails.geometry")

go.property("use_world_position", false)
go.property("wind_direction", vmath.vector3(0.0, 0.0, 0.0))
go.property("trail_width", 20)
go.property("trail_tint_color", vmath.vector4(1.0, 1.0, 1.0, 1.0))
go.property("segment_length_max", 0)
go.property("segment_length_min", 0)
go.property("points_count", 16)
go.property("points_limit", 0)
go.property("fade_tail_alpha", false)
go.property("shrink_tail_width", false)
go.property("texture_tiling", true)
go.property("trail_model_url", msg.url("#trail_model"))

local function create_texture(self)
	self._tex_buffer = buffer.create(self._tex_w * self._tex_h, { 
		{
			name = hash("rgba"), 
			type = buffer.VALUE_TYPE_UINT8, 
			count = 4
		}
	})
	self._tex_stream = buffer.get_stream(self._tex_buffer, hash("rgba"))
end

local function write_vectors(self, p_x, v_1, v_2)
	local s = self._tex_stream

	local i = (p_x - 1) * 4 + 1
	local u = hyper_fmath.encode_rgba_float(v_1.x)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v_1.y)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v_2.x)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]

	i = i + self._tex_w * 4
	u = hyper_fmath.encode_rgba_float(v_2.y)
	s[i + 0] = u[1]
	s[i + 1] = u[2]
	s[i + 2] = u[3]
	s[i + 3] = u[4]
end

local function write_tint(self, p_x, tint)
	local s = self._tex_stream
	local p_y = 5

	local i = (p_y - 1) * self._tex_w * 4 + (p_x - 1) * 4 + 1
	s[i + 0] = tint.x * 255
	s[i + 1] = tint.y * 255
	s[i + 2] = tint.z * 255
	s[i + 3] = tint.w * 255
end

local function make_vectors_from_angle(self, row)
	local a = row.angle - math.pi / 2
	local w = row.width / 2

	row.v_1 = vmath.vector3(math.cos(a) * w, math.sin(a) * w, 0)
	row.v_2 = vmath.vector3(math.cos(a + math.pi) * w, math.sin(a + math.pi) * w, 0)

	-- if not row.new and row.prev ~= nil and row.prev.v1 ~= nil then
	-- 	local prev = row.prev
	-- 	local intersects = hyper_geometry.lines_intersects(row.v1, prev.v1, row.v2, prev.v2, false)
	-- 	if intersects then
	-- 		local v = row.v2
	-- 		row.v2 = row.v1
	-- 		row.v1 = v
	-- 	end
	-- end
end

local function make_angle(diff_pos)
	return math.atan2(-diff_pos.y, -diff_pos.x)
end

local function init_data(self)
	self._data = {}

	for i = 1, self._data_w do
		local tint = vmath.vector4(self.trail_tint_color)
		tint.w = 0

		self._data[i] = {
			dpos = vmath.vector3(), -- vector3
			angle = 0, -- radians
			tint = tint, -- vector4
			width = self.trail_width, -- trail width
			prev = self._data[i - 1] -- link to the previous point
		}
		make_vectors_from_angle(self, self._data[i])
	end
end

local function get_position(self)
	if self.use_world_position then
		local pos = go.get_world_position()
		local scale = go.get_world_scale()
		pos.x = pos.x / scale.x
		pos.y = pos.y / scale.y
		return pos
	else
		return go.get_position()
	end
end

local function init_props(self)
	assert(bit.band(self.points_count, (self.points_count - 1)) == 0, "Points count should be 16, 32, 64 (power of two).")

	if self.points_limit > self.points_count or self.points_limit == 0 then
		self.points_limit = self.points_count
	end

	self._last_pos = get_position(self)
end

local function update_texture(self)
	resource.set_texture(self._resource_path, self._tex_header, self._tex_buffer)
end

local function update_uv_opts(self)
	if self.texture_tiling then
		model.set_constant(self.trail_model_url, "uv_opts", vmath.vector4(1, 0, 1, 0))
	else
		model.set_constant(self.trail_model_url, "uv_opts", vmath.vector4(0, 1, self.points_count, 0))
	end
end

local function encode_data_to_texture(self)
	local p = vmath.vector3()

	for i = self._data_w, 1, -1 do
		local d = self._data[i]

		write_vectors(self, i, p + d.v_1, p + d.v_2)
		write_tint(self, i, d.tint)

		p = p + d.dpos
	end
end

local function update_dirty_data(self)
	--for i = 1, self._data_w do
	--	if self._data[i].dirty then
	--		make_vectors_from_angle(self, self._data[i])
	--		self._data[i].dirty = false
	--	end
	--end
end

local function draw_trail(self)
	update_dirty_data(self)
	encode_data_to_texture(self)
	update_uv_opts(self)
	update_texture(self)
end

local function last_data_points(self)
	return self._data[self._data_w - 1], self._data[self._data_w]
end

local function follow_position(self)
	local cur_pos = get_position(self)
	local diff_pos = self._last_pos - cur_pos
	self._last_pos = cur_pos

	local prev_point, last_point = last_data_points(self)
	--local lp_dist = hyper_geometry.distance(prev_point.pos, last_point.pos)

	local new_point = nil
	--local add_new_p = true
	--if self.segment_length_min > 0 then 
	--	if lp_dist < self.segment_length_min then
	--		add_new_p = false
	--		new_point = last_point
	--		last_point = prev_point
	--	end
	--end

	--if add_new_p then
		new_point = self._data[1]
		for i = 1, self._data_w - 1 do
			self._data[i] = self._data[i + 1]
		end
	--end

	new_point.dpos = diff_pos
	new_point.angle = make_angle(diff_pos)
	new_point.tint = vmath.vector4(self.trail_tint_color)
	new_point.width = self.trail_width
	new_point.prev = last_point
	make_vectors_from_angle(self, new_point)

	self._data[self._data_w] = new_point

	if self.fade_tail_alpha then
		for i = 1, self._data_w do
			local w = (i - 1) / (self._data_w - 1)
			if self._data[i].tint.w > w then
				self._data[i].tint.w = w
				-- self._data[i].dirty = true
			end
		end
	end

	if self.shrink_tail_width then
		for i = 1, self._data_w do
			self._data[i].width = self.trail_width * (i / self._data_w)
			make_vectors_from_angle(self, self._data[i])
			-- self._data[i].dirty = true
		end
	end
end

--local function reset_position(self, position)
--	for i = 1, self._data_w do
--		self._data[i].pos = vmath.vector3(position)
--		self._data[i].dirty = true
--	end
--end

function init(self)
	self._tex_h = 8
	self._tex_w = self.points_count
	self._data_w = self.points_count
	self._resource_path = go.get(self.trail_model_url, "texture0")
	self._tex_header = { 
		width = self._tex_w,
		height = self._tex_h,
		type = resource.TEXTURE_TYPE_2D,
		format = resource.TEXTURE_FORMAT_RGBA,
		num_mip_maps = 1
	}

	model.set_constant(self.trail_model_url, "tex_size", vmath.vector4(self._tex_w, self._tex_h, 0, 0))

	init_props(self)
	create_texture(self)
	init_data(self)
	draw_trail(self)
end

function final(self)
end

function update(self, dt)
	follow_position(self)
	draw_trail(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hyper_msgs.RESET_POSITION then
		--reset_position(self, go.get_position())
		--draw_trail(self)
	end
end
