local hyper_msgs = require("hyper_trails.msgs")

go.property("_angle", 0)

local function update_pos(self, reset)
	local angle = self._angle / 180 * math.pi
	local radius = 140
	go.set_position(vmath.vector3(math.cos(angle), math.sin(angle), 0) * radius + self._default_pos)

	local msg_hash = hyper_msgs.FOLLOW_POSITION
	if reset then
		msg_hash = hyper_msgs.RESET_POSITION
	end
	msg.post("/logo1_trail#trail_maker", msg_hash, {
		position = go.get_position()
	})
end

function init(self)
	self._default_pos = go.get_position()

	msg.post(".", "acquire_input_focus")

	go.animate("#logo1", "_angle", go.PLAYBACK_LOOP_FORWARD, -360, go.EASING_LINEAR, 4)

	--go.set_position(vmath.vector3(-200, -400, 0))
	--go.animate(".", "position.x", go.PLAYBACK_LOOP_PINGPONG, 200, go.EASING_LINEAR, 4)
	--go.animate(".", "position.y", go.PLAYBACK_LOOP_PINGPONG, 400, go.EASING_INOUTSINE, 4)

	update_pos(self, true)
end

function final(self)
end

function update(self, dt)
	update_pos(self)
end

function on_input(self, action_id, action)
	--if action_id == hash("click") then
	--	go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, action.x - 250, go.EASING_OUTCUBIC, 0.3)
	--	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, action.y - 500, go.EASING_OUTCUBIC, 0.3)
	--end
end
